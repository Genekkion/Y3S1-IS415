[
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html",
    "href": "hands_on_exercises/exercise_1/exercise.html",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "Geospatial Data Science is the process of importing, wrangling, integrating, and processing geographically referenced data sets.\nIn this exercise, I will learn how to load data sets and perform basic data science tasks with R.\n\n\nData is key to data analytics, including geospatial analytics. Hence, before analysing, I will acquire the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\n\n\nIn this exercise, two R packages will be mainly used for analysis. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data\n\nIn general, packages can be installed using the install.packages function provided by base R. Later on, packages can also be installed via pacman as well.\n\n# install.packages(\"pacman\")\n\nThe tidyverse package consists of a family of R packages. In this exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nThe packages can be installed and loaded using the code chunk below.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#data-acquisition",
    "href": "hands_on_exercises/exercise_1/exercise.html#data-acquisition",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "Data is key to data analytics, including geospatial analytics. Hence, before analysing, I will acquire the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#r-language-setup",
    "href": "hands_on_exercises/exercise_1/exercise.html#r-language-setup",
    "title": "Hands-On Exercise 1",
    "section": "",
    "text": "In this exercise, two R packages will be mainly used for analysis. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data\n\nIn general, packages can be installed using the install.packages function provided by base R. Later on, packages can also be installed via pacman as well.\n\n# install.packages(\"pacman\")\n\nThe tidyverse package consists of a family of R packages. In this exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nThe packages can be installed and loaded using the code chunk below.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#importing-geospatial-data",
    "href": "hands_on_exercises/exercise_1/exercise.html#importing-geospatial-data",
    "title": "Hands-On Exercise 1",
    "section": "2.1 Importing geospatial data",
    "text": "2.1 Importing geospatial data\nIn this section, the following geospatial data will be imported into R using the st_read function of the sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format\n\n\n2.1.1 Importing polygon feature data in shapefile format\nThe st_read function of the sf package can be used to import the MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.\nNote: when the input geospatial data is in shapefile format, two arguments will be used, namely:\n\ndsn to define the data path\nlayer to provide the shapefile name\n\nAlso note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\nfind(\"st_read\")\n\n[1] \"package:sf\"\n\nmaster_plan_subzone_boundary &lt;- st_read(\n  dsn = \"data/geospatial\", \n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/home/swoh/local/Y3S1-IS415/website/hands_on_exercises/exercise_1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nFrom the ouput, we can learn that some interesting things about the data. It reveals that there are a total of 323 multipolygon features1 and 15 fields in the master_plan_subzone_boundary Simple Feature (sf) data frame. We can also note that the data is in the SVY212 coordinate system. There is also a bounding box which provides the x extend and y extend3 of the data.\n\n\n2.1.2 Importing polyline feature data in shapefile form\nLikewise, the CyclingPath shapefile can be imported in a similar manner.\n\ncycling_path &lt;- st_read(\n  dsn = \"data/geospatial\", \n  layer = \"CyclingPathGazette\"\n)\n\nReading layer `CyclingPathGazette' from data source \n  `/home/swoh/local/Y3S1-IS415/website/hands_on_exercises/exercise_1/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe output shows that there are a total of 3138 multiline4 features and 2 fields. Similar to the previous data set, the data is in the SVY215 coordinate system.\n\n\n2.1.3 Importing GIS data in kml format\nThe PreSchoolsLocation data is instead in the kml format. st_read can still be used to load the data, with a slight modification in usage.\nNote: the complete path and the file extension has to be provided for the kml format.\n\npreschool &lt;- st_read(\n  \"data/geospatial/PreSchoolsLocation.kml\"\n)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/home/swoh/local/Y3S1-IS415/website/hands_on_exercises/exercise_1/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nFrom the output, we can see that there are 2290 point6 features and 16 fields. Differing from the previous two data sets, it is in the WGS847 coordinate system."
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "hands_on_exercises/exercise_1/exercise.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "Hands-On Exercise 1",
    "section": "2.2 Checking the content of a Simple Feature data frame",
    "text": "2.2 Checking the content of a Simple Feature data frame\nData loaded into a Simple Feature (sf) data frame can be analysed using functions from the various packages.\n\n2.2.1 st_geometry\nExtraction of geometry can be done using the st_geometry function of the sf package. The function returns the geometry which consists of the spatial component of the data, representing shapes and locations but not their attribute data.\n\nfind(\"st_geometry\")\n\n[1] \"package:sf\"\n\nst_geometry(master_plan_subzone_boundary)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\n2.2.2 glimpse\nBesides the functions provided by the sf package, other packages such as dplyr may be used as well. glimpse is a function from dplyr provides a report, showing the data types of each field.\n\nfind(\"glimpse\")\n\n[1] \"package:dplyr\"  \"package:tibble\"\n\nglimpse(master_plan_subzone_boundary)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n2.2.3 head\nBase R also provides functions such as head which works similarly to its counterpart in python’s pandas library.\nNote: the variable n can be used to specify the number of rows to look at.\n\nfind(\"head\")\n\n[1] \"package:utils\"\n\nhead(master_plan_subzone_boundary, n = 5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#plotting-geospatial-data",
    "href": "hands_on_exercises/exercise_1/exercise.html#plotting-geospatial-data",
    "title": "Hands-On Exercise 1",
    "section": "2.3 Plotting geospatial data",
    "text": "2.3 Plotting geospatial data\nBeyond looking at the numbers, we are also interested in visualising the features in a visual form. R’s built-in graphics package provides a handy plot function to view all of the data at together.\nNote: the variable max.plot can be used to set the number of attributes to plot.\n\nfind(\"plot\")\n\n[1] \"package:graphics\" \"package:base\"    \n\nplot(master_plan_subzone_boundary, max.plot = 15)\n\n\n\n\n\n\n\n\nBy default, it will create a multi-plot of all the attributes provided. We can also choose the specific parts to plot such as the geometry as shown below.\n\nplot(st_geometry(master_plan_subzone_boundary))\n\n\n\n\n\n\n\n\nIf we instead want to plot a specific attribute, attributes can also be indexed via their keys directly.\n\nplot(master_plan_subzone_boundary[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#projection",
    "href": "hands_on_exercises/exercise_1/exercise.html#projection",
    "title": "Hands-On Exercise 1",
    "section": "2.4 Projection",
    "text": "2.4 Projection\nWhen dealing with geospatial data, we also want to obtain the map projection. Since data may not be in the same coordinate system (e.g. SVY21 vs WGS84), we need to project the different geospatial data before comparison.\nThe process of transforming the data from one coordinate system to another is known as projection transformation.\n\n2.4.1 EPSG code\nSometimes, data such as the coordinate system of the source data may be missing, due to missing files or wrong assignments during importing.\nIn order to standardize between the different coordinate systems, the European Petroleum Survey Group (EPSG), created and manages codes. The codes allow for easier transformation between the coordinate systems. For example, EPSG:4326 represents WGS84 while EPSG:3414 represents SVY21. Other ESPG codes can be found here.\nWe can use st_crs to look at the coordinate system specified in the data frame.\n\nfind(\"st_crs\")\n\n[1] \"package:sf\"\n\nst_crs(master_plan_subzone_boundary)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nThe output shows that the data frame was projected to be in the SVY21 coordinate system, yet the EPSG codes at the bottom shows the wrong EPSG code of 9001, when we know that the correct code should be 3414.\nTo fix it, we can set the EPSG code manually, using the st_set_crs function.\n\nfind(\"st_set_crs\")\n\n[1] \"package:sf\"\n\nmaster_plan_subzone_boundary_3414 &lt;- st_set_crs(master_plan_subzone_boundary, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(master_plan_subzone_boundary_3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is correctly set to 3414 now.\n\n\n2.4.2 Transforming from WGS84 to SVY21\nComparing WGS84 and SVY21, WGS84 is a geographic coordinate system which is meant for worldwide usage and uses the shape and origin of the Earth itself to define its coordinates. On the other hand, SVY21 is of a projected coordinate system which translates the area onto a flat plane.\nTransformation to a projected coordinate system is required if the analysis requires distance and / or area measurements.\nWe will perform this on the preschool data set. Firstly, we take a look at what the preschool data set contains.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nAs it is in the WGS84 geographic coordinate system, we are looking to transform it into the SVY22 projected coordinate system. To do this, we can use st_transform to project it from one coordinate system to another, Mathematically.\nNote: st_set_crs is not appropriate as it only sets the coordinate system attribute, but does not transform the data itself.\n\npreschool_3414 &lt;- st_transform(\n  preschool,\n  crs = 3414\n)\nst_geometry(preschool_3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#importing-the-aspatial-data",
    "href": "hands_on_exercises/exercise_1/exercise.html#importing-the-aspatial-data",
    "title": "Hands-On Exercise 1",
    "section": "3.1 Importing the aspatial data",
    "text": "3.1 Importing the aspatial data\nSince the listings data set is in csv file format, we can use the read_csv function from the readr package to import the data. The data will be imported as a tibble data frame, which is different from the SF data frames we used in the previous examples.\nWe then use the list function from Base R to view the data.\n\nfind(\"read_csv\")\n\n[1] \"package:readr\"\n\nlistings &lt;- read_csv(\n  \"data/aspatial/listings.csv\",\n  show_col_types = FALSE\n)\nfind(\"list\")\n\n[1] \"package:base\"\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nWe can see that there are 3540 rows and 18 columns. The geospatial data can be seen in the latitude and longitude columns. Notice that both columns are in the the decimal degree format, which we will assume to be data using the WGS84 geographic coordinate system."
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#conversion-to-simple-feature-data-frame",
    "href": "hands_on_exercises/exercise_1/exercise.html#conversion-to-simple-feature-data-frame",
    "title": "Hands-On Exercise 1",
    "section": "3.2 Conversion to Simple Feature data frame",
    "text": "3.2 Conversion to Simple Feature data frame\nThe data can be converted into a SF data frame using the st_as_sf. We then convert it for the SVY21 coordinate system.\nNote:\n\ncoords can be used to specify the columns for coordinate data\ncrs can be used to specify the EPSG codes for conversion\n%&gt;% is the pipe operator in R to chain functions, avoiding nesting\n\n\nfind(\"st_as_sf\")\n\n[1] \"package:sf\"\n\nlistings_sf &lt;- st_as_sf(\n  listings,\n  coords = c(\"longitude\", \"latitude\"),\n  crs = 4326\n) %&gt;%\n  st_transform(crs = 3414) %&gt;%\n  glimpse()\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#buffering",
    "href": "hands_on_exercises/exercise_1/exercise.html#buffering",
    "title": "Hands-On Exercise 1",
    "section": "4.1 Buffering",
    "text": "4.1 Buffering\nBuffering is a defined zone or area created around or within a geographic feature, typically for highlighting the space around the feature.\nFor example, in the cycling_path data set, we have existing the cycling path. Planning to upgrade the path, we will need to scquire 5 metres of land on both sides of the path. How can we determine the area required?\nFirstly, we can use st_buffer to compute the buffer itself around the path.\nNote:\n\ndist can be used to specify the buffer distance\nnQuadSegs can be used to specify the number of segments used to approximate a quarter of a circle. Used for approximating for rounded corners.\n\n\nfind(\"st_buffer\")\n\n[1] \"package:sf\"\n\ncycling_path_buffer &lt;- st_buffer(\n  cycling_path,\n  dist = 5,\n  nQuadSegs = 30\n)\n\nThe area can then be calculated using st_area, and sum.\nNote: $ can be used to access columns of data frames directly\n\nfind(\"st_area\")\n\n[1] \"package:sf\"\n\nfind(\"sum\")\n\n[1] \"package:base\"\n\ncycling_path_buffer$Area &lt;- st_area(cycling_path_buffer)\nsum(cycling_path_buffer$Area)\n\n2218855 [m^2]"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#point-in-polygon-count",
    "href": "hands_on_exercises/exercise_1/exercise.html#point-in-polygon-count",
    "title": "Hands-On Exercise 1",
    "section": "4.2 Point-in-polygon count",
    "text": "4.2 Point-in-polygon count\nPoint-in-polygon count refers to the number of points which fall within a given polygon. Referencing the preschool data set, let’s say we want to find the number of preschools in each Planning Subzone.\nWe first identify the preschools located in each Planning Subzone using st_intersects, and then use length to sum them up.\n\nfind(\"st_intersects\")\n\n[1] \"package:sf\"\n\nfind(\"lengths\")\n\n[1] \"package:base\"\n\nmaster_plan_subzone_boundary_3414$\"Preschool Count\" &lt;- \n  st_intersects(\n    master_plan_subzone_boundary_3414,\n    preschool_3414\n  ) %&gt;%\n  lengths()\n\nTo display the information, we can use the summary function.\n\nfind(\"summary\")\n\n[1] \"package:base\"\n\nsummary(master_plan_subzone_boundary_3414$\"Preschool Count\")\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nWe can also use the top_n function from the dplyr package if we are interested in the top few rows.\nWarn: using ” does not seem to work when specifying the column. Usage of ` is required.\n\nfind(\"top_n\")\n\n[1] \"package:dplyr\"\n\ntop_n(\n  master_plan_subzone_boundary_3414,\n  1,\n  `Preschool Count`\n)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry Preschool Count\n1    4339824 MULTIPOLYGON (((42196.76 38...              72\n\n\nIf we want to get the area of each planning subzone, we can also use st_area. Density can then be calculated using the mutate function.\n\nfind(\"st_area\")\n\n[1] \"package:sf\"\n\nfind(\"mutate\")\n\n[1] \"package:dplyr\"\n\nmaster_plan_subzone_boundary_3414$Area &lt;-\n  st_area(\n    master_plan_subzone_boundary\n  )\nmaster_plan_subzone_boundary_3414 &lt;- \n  mutate(\n    master_plan_subzone_boundary_3414,\n    `Preschool Density` = (`Preschool Count` / `Area`) * 1000000\n  )"
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#exploratory-data-analysis-eda",
    "href": "hands_on_exercises/exercise_1/exercise.html#exploratory-data-analysis-eda",
    "title": "Hands-On Exercise 1",
    "section": "4.3 Exploratory Data Analysis (EDA)",
    "text": "4.3 Exploratory Data Analysis (EDA)\nExploratory Data Analysis (EDA) aims to summarise and understand the main characteristics of a dataset, often with visuals. It is used to uncover patterns, anomalies, test hypotheses, making it an important part of data analysis.\nWith reference to the previously calcualted density for the preschool data set, let us visualise the data. We can use a histogram to reveal the distribution, using the hist function.\n\nfind(\"hist\")\n\n[1] \"package:graphics\"\n\nhist(\n  master_plan_subzone_boundary_3414$\"Preschool Density\"\n)\n\n\n\n\n\n\n\n\nWhile the graphics package does provide functions for simple graphs, we can also use the ggplot2 package to plot some more advanced and customisable graphs.\n\nggplot(\n  data = master_plan_subzone_boundary_3414,\n  aes(\n    x = as.numeric(`Preschool Density`)\n  )\n) + \n  geom_histogram(\n    bins = 20,\n    color = \"black\",\n    fill = \"orange\"\n  ) + \n\n  labs(\n    title = \"Are preschools evenly distributed in Singapore?\",\n    subtitle = \"There are many planning subzones with a single preschool.\\nOn the other hand, there are two planning subzones with at least 20 preschools.\",\n    x = \"Preschool density (per km^2)\",\n    y = \"Frequency\"\n  )\n\n\n\n\n\n\n\n\nIf we want to use a scatterplot instead, we can still use ggplot2 to do so.\n\nggplot(\n  data = master_plan_subzone_boundary_3414,\n  aes(\n    x = as.numeric(`Preschool Density`),\n    y = `Preschool Count`,\n  )\n) + \n  geom_point(\n    color = \"black\",\n    fill = \"orange\"\n  ) + \n\n  xlim(0, 40) +\n  ylim(0, 40) +\n\n  labs(\n    title = \"\",\n    x = \"Preschool density (per km^2)\",\n    y = \"Frequency\"\n  )\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "hands_on_exercises/exercise_1/exercise.html#footnotes",
    "href": "hands_on_exercises/exercise_1/exercise.html#footnotes",
    "title": "Hands-On Exercise 1",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMultipolygon features: represents geographic areas consisting of multiple polygons. Useful for representing complex or irregularly shaped regions.↩︎\nSVY21: Singapore Vital Years 21st Century, a projected coordinate system primarily used for mapping data in Singapore.↩︎\nExtend: difference between minimum and maximum coordinates, a.k.a. distance or length.↩︎\nMultiline features: represents multiple line segments or paths. Typically used for linear features such as roads and rivers.↩︎\nSVY21: Singapore Vital Years 21st Century, a projected coordinate system primarily used for mapping data in Singapore.↩︎\nPoint features: represents point on a region of area, useful for landmarking items on a map.↩︎\nWGS84: World Geodetic System 1984, a geographic coordinate system used to define a global reference frame for the Earth. Used for mapping geographic locations worldwide.↩︎"
  },
  {
    "objectID": "about/about.html",
    "href": "about/about.html",
    "title": "About",
    "section": "",
    "text": "Hi! I am Sheow Woon, an undergraduate student at Singapore Management University, majoring in Computer Science. This website is developed to document my learning for course IS415: Geospatial Analytics and Applications."
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html",
    "href": "hands_on_exercises/exercise_2/exercise.html",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "Thematic mapping is the process of visualising the properties of geographic features through the use of map symbols. These properties may not be naturally visible, such as population, temperature, crime rate, and property prices. As such, thematic mapping helps to visualise them better.\nWhen exploring geographical data, we often use visual techniques to explore and interpret the data. Geovisualisation enables us to visualise the data better.\n\n\nIn this exercise, the main objective will be to plot functional and turthful choropleth maps, primarily using the tmap package. Apart from tmap, the following R packages will also be used:\n\nreadr for importing of delimited text files\ntidyr for tidying of data\ndplyr for wrangling of data\nsf for handling of geospatial data\n\nThe packages can be installed and loaded via pacman as shown below.\n\npacman::p_load(sf, tmap, tidyverse)\n\nNote: readr, tidyr, dplyr can be found in the tidyverse package. Loading the tidyverse package automatically loads the other relevant packages."
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#tools",
    "href": "hands_on_exercises/exercise_2/exercise.html#tools",
    "title": "Hands-On Exercise 2",
    "section": "",
    "text": "In this exercise, the main objective will be to plot functional and turthful choropleth maps, primarily using the tmap package. Apart from tmap, the following R packages will also be used:\n\nreadr for importing of delimited text files\ntidyr for tidying of data\ndplyr for wrangling of data\nsf for handling of geospatial data\n\nThe packages can be installed and loaded via pacman as shown below.\n\npacman::p_load(sf, tmap, tidyverse)\n\nNote: readr, tidyr, dplyr can be found in the tidyverse package. Loading the tidyverse package automatically loads the other relevant packages."
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#data-acquisition",
    "href": "hands_on_exercises/exercise_2/exercise.html#data-acquisition",
    "title": "Hands-On Exercise 2",
    "section": "2.1 Data acquisition",
    "text": "2.1 Data acquisition\nTwo datasets will be utilised in this exercise:\n\nMaster Plan 2014 Subzone Boundary (Web) (MP14_SUBZONE_WEB_PL), which is in the ESRI shapefile format. It contains geospatial data of the geographical boundary of Singapore at the planning subzone level, based on the URA Master Plan 2014. It can be downloaded from data.gov.sg.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling for June 2011-2020 (respopagesextod2011to2020.csv), which is in the csv format. It contains aspatial data, including the PA and SZ fields which act as unique identifiers to geocode in the MP14_SUBZONE_WEB_PL shapefile. It can be downloaded from the Department of Statistics, Singapore."
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#importing-of-geospatial-data",
    "href": "hands_on_exercises/exercise_2/exercise.html#importing-of-geospatial-data",
    "title": "Hands-On Exercise 2",
    "section": "2.2 Importing of geospatial data",
    "text": "2.2 Importing of geospatial data\nAs per the previous exercise, we will be using the sf package for importing of the geospatial data.\n\nmaster_plan_subzone_boundary &lt;- st_read(\n  dsn = \"data/geospatial\", \n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/home/swoh/local/Y3S1-IS415/website/hands_on_exercises/exercise_2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nWe can examine the contents by calling the variable name itself.\n\nmaster_plan_subzone_boundary\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\nNote: if we want to see all rows, we can define the row limit as such.\n\n# print(master_plan_subzone_boundary, n  = Inf)"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#importing-of-aspatial-data",
    "href": "hands_on_exercises/exercise_2/exercise.html#importing-of-aspatial-data",
    "title": "Hands-On Exercise 2",
    "section": "2.3 Importing of aspatial data",
    "text": "2.3 Importing of aspatial data\nLikewise, for aspatial data, we will be using the readr package for importing.\n\nfind(\"read_csv\")\n\n[1] \"package:readr\"\n\npopulation_data &lt;- read_csv(\n  \"data/aspatial/respopagesextod2011to2020.csv\",\n)\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#data-preparation",
    "href": "hands_on_exercises/exercise_2/exercise.html#data-preparation",
    "title": "Hands-On Exercise 2",
    "section": "2.4 Data preparation",
    "text": "2.4 Data preparation\nBefore we can prepare a thematic map, we will need to prepare a data table for the year of choice. In this case, we will be preparing the map for the year 2020. The data table will include the variables:\n\nPA: geocode identifier\nSZ: geocode identifier\nYOUNG: contains age groups of 0 to 4, until age groups of 20 to 24\nECONOMY_ACTIVE: contains age groups of 25 to 29, until age groups of 60 to 64\nAGED: contains age groups of 65 and above\nTOTAL: all age groups\nDEPENDENCY: the ratio between the YOUNG and AGED against the ECONOMY_ACTIVE group"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#data-wrangling",
    "href": "hands_on_exercises/exercise_2/exercise.html#data-wrangling",
    "title": "Hands-On Exercise 2",
    "section": "2.5 Data wrangling",
    "text": "2.5 Data wrangling\nIn this section, we will be performing data wrangling and transforming the data using functions from the tidyr and dplyr package.\n\nfind(\"pivot_wider\")\n\n[1] \"package:tidyr\"\n\nfind(\"mutate\")\n\n[1] \"package:dplyr\"\n\nfind(\"filter\")\n\n[1] \"package:dplyr\" \"package:stats\"\n\nfind(\"group_by\")\n\n[1] \"package:dplyr\"\n\nfind(\"select\")\n\n[1] \"package:dplyr\"\n\npopulation_data_2020 &lt;- population_data %&gt;%\n  # Filter by field of \"Time\" for the year 2020\n  filter(`Time` == 2020) %&gt;%\n\n  # Groups up all entries with the same PA, SZ which are geocode identifiers and AG, the age group\n  group_by(`PA`, `SZ`, `AG`) %&gt;%\n\n  # Summarise allows for calculation of statistics for the entire group\n  # Used here to find the total population for a group\n  summarise(`GROUP_POP` = sum(`Pop`)) %&gt;%\n\n  # Removes the grouping, leaving the GROUP_POP field still tagged on to each entry\n  ungroup() %&gt;%\n\n  # Collects the entries with the same AG field and combine their GROUP_POP values\n  pivot_wider(\n    names_from = `AG`,\n    values_from = `GROUP_POP`\n  ) %&gt;%\n\n  # Create the YOUNG field to sum up the values from the appropriate age groups\n  #   between 0 - 24\n  mutate(\n\n    # The columns from column 3 to 19 represent the different age groups\n    # We use rowSums to sum the values across selected columns\n    # WARN: unlike many other programming languages, R is one-indexed, not zero-indexed\n    # WARN: the age group in the columns have been sorted lexigraphically, hence the need\n    #       to add the the additional 14th column\n\n    `YOUNG` = \n      rowSums(.[3:6]) +\n      rowSums(.[14])\n  ) %&gt;%\n\n  # Create the ECONOMY_ACTIVE field for age groups between 25 - 64\n  mutate(\n    `ECONOMY_ACTIVE` = \n      rowSums(.[7:13]) +\n      rowSums(.[15])\n  ) %&gt;%\n  \n  # Likewise create for AGED\n  mutate(\n    `AGED` = rowSums(.[16:21])\n  ) %&gt;%\n\n  # Sum up all age group data\n  mutate(\n    `TOTAL` = rowSums(.[3:21])\n  ) %&gt;%\n\n  # Calculate dependency as explained above\n  mutate(\n    `DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY_ACTIVE`\n  ) %&gt;%\n\n  # View selected fields\n  select(\n    `PA`, `SZ`, `YOUNG`,\n    `ECONOMY_ACTIVE`, `AGED`, `TOTAL`,\n    `DEPENDENCY`\n  )\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\npopulation_data_2020\n\n# A tibble: 332 × 7\n   PA         SZ                     YOUNG ECONOMY_ACTIVE  AGED TOTAL DEPENDENCY\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;dbl&gt;          &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre  1290           2760   760  4810      0.743\n 2 Ang Mo Kio Cheng San               5640          16460  6050 28150      0.710\n 3 Ang Mo Kio Chong Boon              5100          15000  6470 26570      0.771\n 4 Ang Mo Kio Kebun Bahru             4620          13010  5120 22750      0.749\n 5 Ang Mo Kio Sembawang Hills         1880           3630  1310  6820      0.879\n 6 Ang Mo Kio Shangri-La              3330           9050  3610 15990      0.767\n 7 Ang Mo Kio Tagore                  1940           4480  1530  7950      0.775\n 8 Ang Mo Kio Townsville              4190          11950  5100 21240      0.777\n 9 Ang Mo Kio Yio Chu Kang               0              0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East       1110           2410   750  4270      0.772\n# ℹ 322 more rows\n\n\n\n2.5.1 Joining geospatial and aspatial data\nAs mentioned above, the PA and SZ fields from the aspatial data will act as geocode identifiers which correspond to that in the geospatial data. However, we will have to transform the values of the PA and SZ field into uppercase to match that of the geospatial data.\n\npopulation_data_2020 &lt;- population_data_2020 %&gt;%\n  # Alter the values using the specified function\n  mutate_at(\n    .vars = vars(`PA`, `SZ`),\n    .funs = list(toupper)\n  ) %&gt;%\n\n  # Filter out to remove all entries without anyone in the `ECONOMY_ACTIVE`\n  #   group as it results in division by 0 -&gt; NaN from the previous calculation\n  filter(\n    `ECONOMY_ACTIVE` &gt; 0\n  )\n\nWe then perform the joining usin gthe dplyr package, using the SUBZONE_N from the geospatial data and SZ from the aspatial data to match.\n\nfind(\"left_join\")\n\n[1] \"package:dplyr\"\n\nmaster_plan_subzone_population_2020 &lt;- left_join(\n  master_plan_subzone_boundary,\n  population_data_2020,\n  by = c(\"SUBZONE_N\" = \"SZ\")\n)\n\nNote: a left join is performed, hence order matters to ensure that the resulting data contains all the subzones, with the added population data on top.\nWe can then save the data into an rds file for reading from in the future.\n\nfind(\"write_rds\")\n\n[1] \"package:readr\"\n\nwrite_rds(\n  master_plan_subzone_population_2020,\n  \"data/rds/master_plan_subzone_population_2020.rds\"\n)"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#quick-plot",
    "href": "hands_on_exercises/exercise_2/exercise.html#quick-plot",
    "title": "Hands-On Exercise 2",
    "section": "3.1 Quick plot",
    "text": "3.1 Quick plot\nThe easiest and fastest method of plotting the map can be done using the qtm function from tmap. While it may not be as customisable, it gives a good default and requires not much configuration, making it useful for quick visualisations.\nNote: tmap can be set for either plot for static maps or view for interactive ones.\nNote: qtm accepts the fill argument to set the data to colour in.\n\nfind(\"qtm\")\n\n[1] \"package:tmap\"\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(\n  master_plan_subzone_population_2020,\n  fill = \"DEPENDENCY\"\n)"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#custom-maps",
    "href": "hands_on_exercises/exercise_2/exercise.html#custom-maps",
    "title": "Hands-On Exercise 2",
    "section": "3.2 Custom maps",
    "text": "3.2 Custom maps\nWhile qtm is great for most cases, sometimes we want to draw some high quality maps and have more control over the properties. In order to do that, we can still utilise tmap’s capabilities.\n\n# The base, background plot\ntm_shape(master_plan_subzone_population_2020) +\n  \n  # Colour in the data\n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"quantile\",\n    palette = \"Blues\",\n    title = \"Dependency ratio\"\n  ) +\n\n  # Set properties\n  tm_layout(\n    main.title = \"Distribution of Dependency Ratio by planning subzone\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n\n    legend.height = 0.45,\n    legend.width = 0.35,\n    \n    frame = TRUE\n  ) +\n\n  # Add border\n  tm_borders(alpha = 0.5) +\n\n  # Add compass\n  tm_compass(\n    type = \"8star\",\n    size = 2\n  ) +\n\n  # Add scale\n  tm_scale_bar() +\n\n  # Add grid\n  tm_grid(alpha = 0.2) +\n\n  # Add credits\n  tm_credits(\n    \"Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\\n and population data from Department of Statistics (DOS)\",\n    position = c(\"left\", \"bottom\")\n  )\n\n\n\n\n\n\n\n\nUsage of the tmap elements above will be explained below.\n\n3.2.1 Base map\ntm_shape is used to define the input data, while tm_polygon is used to draw the planning subzone polygons. It does not plot out a specific field in the data but rather, the entire area it consists of.\n\ntm_shape(master_plan_subzone_population_2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n3.2.2 Simple plot\nIf we want to just plot a field, we can also do so by adding it within the tm_polygon function.\n\ntm_shape(master_plan_subzone_population_2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThe default interval binning used in tm_polygons is called “pretty”. It utilises the colour scheme of Y10rRd of ColorBrewer. By default, missing values will be shaded grey.\n\n\n3.2.3 Fill & border\nUnder the hood, tm_polygons is a wrapper for the tm_fill and tm_border.tm_fill functions. tm_fill is used to colour in the polygons while tm_border applies the borders of the shapefile onto the map.\nUsing tm_fill alone, we get the following map.\n\ntm_shape(master_plan_subzone_population_2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nNote: as shown in the map, the lack of borders will result in no distinction between subzones.\nWith the addition of tm_borders, we can demarcate the borders of each subzone clearly.\n\ntm_shape(master_plan_subzone_population_2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(\n\n    # Line width\n    lwd = 0.5,\n\n    # Colour transparency\n    alpha = 1\n  )\n\n\n\n\n\n\n\n\nNote: tm_borders accepts a total of 4 arguments:\n\nalpha: transparency\ncol: colour\nlwd: line width\nlty: line type"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#data-classification",
    "href": "hands_on_exercises/exercise_2/exercise.html#data-classification",
    "title": "Hands-On Exercise 2",
    "section": "3.3 Data classification",
    "text": "3.3 Data classification\nIn most cases, we will want to be able to group the data into certain groups based on the range of data.\ntmap offers a total of 10 data classification methods: pretty (default), fixed, sd, equal, quantile, kmeans, hclust, bclust, fisher, and jenks.\n\n3.3.1 Built-in classification methods\nBy default there are some built-in classification methods available for use directly.\nThe first one is quantile which splits according to equal-sized intervals (same number of data points in each interval).\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"quantile\",\n\n    # Split into 5 classes\n    n = 5\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )\n\n\n\n\n\n\n\n\nUsing the equal splits the data into equally-ranged intervals.\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"equal\",\n    n = 5\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )\n\n\n\n\n\n\n\n\nNotice that we can see a stark difference between both maps, showing the difference in how classification methods can heavily affect the visuals of the map. This serves as a good reminder that we should not base our findings directly from how maps appear as there are several factors which can affect it greatly.\nFor example, the map below uses a different number of classes and yet shows similar contrasts in its output between the equal and pretty style.\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"pretty\",\n    n = 10\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#custom-breaks",
    "href": "hands_on_exercises/exercise_2/exercise.html#custom-breaks",
    "title": "Hands-On Exercise 2",
    "section": "3.4 Custom breaks",
    "text": "3.4 Custom breaks\nInstead of using the built-in breakpoints, we can also define the breakpoints explicitly.\nNote: tmap breaks include a minimum and maximum. Hence, for n categories, n + 1 elements must be specified in the breaks parameter.\nBefore we begin, we should take a look at the data to decide on where we want to set our breakpoints.\n\nsummary(master_plan_subzone_population_2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\nBased on the results above, let’s say we set the breakpoints at 0.10 intervals between 0.6 and 0.9. We will also include a minimum and maximum of 0 and 1.0 respectively.\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    \"DEPENDENCY\",\n    breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\n  ) +\n  \n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )\n\nWarning: Values have found that are higher than the highest break"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#colour-schemes",
    "href": "hands_on_exercises/exercise_2/exercise.html#colour-schemes",
    "title": "Hands-On Exercise 2",
    "section": "3.5 Colour schemes",
    "text": "3.5 Colour schemes\nInstead of using the default colours, we are also able to specify the preferred colour palette into the different tmap elements.\n\n3.5.1 ColourBrewer palette\nBuilt-in into the package are ColourBrewer palettes which can be specified with the name of the colour palette, such as Blues.\n\ntm_shape(master_plan_subzone_population_2020) +\n  \n  tm_fill(\n    \"DEPENDENCY\",\n    n = 6,\n    style = \"quantile\",\n    palette = \"Blues\"\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )\n\n\n\n\n\n\n\n\nWe can also reverse the colour shading by adding the - prefix.\n\ntm_shape(master_plan_subzone_population_2020) +\n  \n  tm_fill(\n    \"DEPENDENCY\",\n    n = 6,\n    style = \"quantile\",\n    palette = \"-Blues\"\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#map-layout",
    "href": "hands_on_exercises/exercise_2/exercise.html#map-layout",
    "title": "Hands-On Exercise 2",
    "section": "3.6 Map layout",
    "text": "3.6 Map layout\nMap layout refers to the combination of map elements of the map. It includes several elements such as the title, scale bar, compass, margins, etc.\n\n3.6.1 Map legend\nIn tmap, there are several options to alter the legend of the map.\n\ntm_shape(master_plan_subzone_population_2020) +\n  \n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"jenks\",\n    palette = \"Blues\",\n\n    legend.hist = TRUE,\n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n\n  tm_layout(\n    main.title = \"Distribution of Dependency Ratio by planning subzone\\n (Jenks classification)\",\n    main.title.position = \"center\",\n    main.title.size = 1,\n\n    legend.height = 0.45,\n    legend.width = 0.35,\n    legend.outside = FALSE,\n    legend.position = c(\"right\", \"bottom\"),\n    \n    frame = FALSE\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )\n\n\n\n\n\n\n\n\n\n\n3.6.2 Map style\nThere are some styles included in the package as well, defined in the tmap_style function.\n\ntm_shape(master_plan_subzone_population_2020) +\n  \n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"jenks\",\n    palette = \"Blues\"\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  ) + \n\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n3.6.3 Cartographic furniture\nBeyond map style, tmap also provides other functions to draw toher map furniture such as compass, scale bar and grid lines.\n\ntm_shape(master_plan_subzone_population_2020) +\n  \n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"jenks\",\n    palette = \"Blues\",\n  ) +\n\n  tm_layout(\n    main.title = \"Distribution of Dependency Ratio by planning subzone\",\n    main.title.position = \"center\",\n    main.title.size = 1.2,\n\n    legend.height = 0.45,\n    legend.width = 0.35,\n    \n    frame = TRUE\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  ) +\n\n  tm_compass(\n    type = \"8star\",\n    size = 2\n  ) +\n\n  tm_scale_bar(width = 0.15) +\n\n  tm_grid(\n    lwd = 0.1,\n    alpha = 0.2\n  ) +\n\n  tm_credits(\n    \"Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\\n and population data from Department of Statistics (DOS)\",\n    position = c(\"left\", \"bottom\")\n  )\n\n\n\n\n\n\n\n\nLastly, to rest to default style we can also use the following:\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\""
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#facet-maps",
    "href": "hands_on_exercises/exercise_2/exercise.html#facet-maps",
    "title": "Hands-On Exercise 2",
    "section": "3.7 Facet maps",
    "text": "3.7 Facet maps\nFacet maps are maps which are composed of many smaller maps, arranged side-by-side and sometimes stacked vertically. They enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nUsing tmap, there are 3 ways to plot facet maps:\n\nBy assigning multiple values to at least one of the aesthetic arguments\nBy defining group-by variables in tm_facets\nBy creating multiple, separate maps, and combining them with tmap_arrange\n\n\n3.7.1 Assigning multiple values\nFor example, we will be combining the YOUNG and AGED fields from the dataset into the map plots.\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    c(\"YOUNG\", \"AGED\"),\n    style = \"equal\",\n    palette = \"Blues\"\n  ) +\n\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  ) +\n\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\nWe can also allocate separate colour schemes for each small map.\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    c(\"YOUNG\", \"AGED\"),\n    style = \"equal\",\n    palette = list(\"Blues\", \"Greens\")\n  ) +\n\n  tm_layout(\n    legend.position = c(\"right\", \"bottom\")\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  ) +\n\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\n3.7.2 Group-by variables\nAnother method for drawing facet maps is to group the data based on certain fields. In our case, we can group the subzones in the data to the regions they belong to.\n\ntm_shape(master_plan_subzone_population_2020) +\n\n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"quantile\",\n    palette = \"Blues\",\n\n    # Set the minimum size of polygons to be plotted\n    thres.poly = 0\n  ) +\n\n  tm_facets(\n\n    # Field to group by\n    by = \"REGION_N\",\n\n    # Set whether coordinate systems of facets are allowed to defer\n    free.coords = TRUE,\n    \n    # Set whether to exclude maps without data\n    drop.units = TRUE\n  ) +\n\n  tm_layout(\n    legend.show = FALSE,\n    title.position = c(\"center\", \"center\"),\n    title.size = 20\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )\n\n\n\n\n\n\n\n\n\n\n3.7.3 Stand-alone maps\nMultiple stand-alone maps can also be created using tmap_arrange.\n\npopulation_young_map &lt;- tm_shape(master_plan_subzone_population_2020) +\n  tm_polygons(\n    \"YOUNG\",\n    style = \"quantile\",\n    palette = \"Blues\"\n  )\n\npopulation_aged_map &lt;- tm_shape(master_plan_subzone_population_2020) +\n  tm_polygons(\n    \"AGED\",\n    style = \"quantile\",\n    palette = \"Blues\"\n  )\n\ntmap_arrange(\n  population_young_map,\n  population_aged_map,\n  asp = 1,\n  ncol = 2\n)"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#selection-criterion",
    "href": "hands_on_exercises/exercise_2/exercise.html#selection-criterion",
    "title": "Hands-On Exercise 2",
    "section": "3.8 Selection criterion",
    "text": "3.8 Selection criterion\nInstead of creating multiple, smaller maps, it is also possible to map spatial objects which satisfy a certain selection criterion.\n\ntm_shape(\n  master_plan_subzone_population_2020[\n    master_plan_subzone_population_2020$REGION_N == \"CENTRAL REGION\",\n  ]\n) +\n\n  tm_fill(\n    \"DEPENDENCY\",\n    style = \"quantile\",\n    palette = \"Blues\",\n\n    legend.hist = TRUE,\n    legend.is.portrait = TRUE,\n    legend.hist.z = 0.1\n  ) +\n\n  tm_layout(\n    legend.outside = TRUE,\n    legend.position = c(\"right\", \"bottom\"),\n\n    frame = FALSE\n  ) +\n\n  tm_borders(\n    lwd = 0.5,\n    alpha = 1\n  )"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#tmap",
    "href": "hands_on_exercises/exercise_2/exercise.html#tmap",
    "title": "Hands-On Exercise 2",
    "section": "4.1 tmap",
    "text": "4.1 tmap\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#geospatial-data-wrangling",
    "href": "hands_on_exercises/exercise_2/exercise.html#geospatial-data-wrangling",
    "title": "Hands-On Exercise 2",
    "section": "4.2 Geospatial data wrangling",
    "text": "4.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: Standardized Support for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "hands_on_exercises/exercise_2/exercise.html#data-wrangling-1",
    "href": "hands_on_exercises/exercise_2/exercise.html#data-wrangling-1",
    "title": "Hands-On Exercise 2",
    "section": "4.3 Data wrangling",
    "text": "4.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with “spread()” and “gather()” Functions"
  },
  {
    "objectID": "in_class_exercises/exercise_2/data/MPSZ-2019/MPSZ-2019.html",
    "href": "in_class_exercises/exercise_2/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415-GAA - swoh",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics and Applications. In this website, you will find my coursework prepared for this course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 1\n\n\n\n\n\nGeospatial Data Science with R\n\n\n\n\n\nAug 15, 2024\n\n\nOh Sheow Woon\n\n\n\n\n\n\n\n\n\n\n\n\nHands-On Exercise 2\n\n\n\n\n\nThematic Mapping and Geovisualisation with R\n\n\n\n\n\nAug 23, 2024\n\n\nOh Sheow Woon\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]